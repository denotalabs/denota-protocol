type Transaction @entity {
  id: ID!
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: String!
  events: [Event!]! @derivedFrom(field: "transaction")
}
type ERC20 @entity(immutable: true) {
  id: ID!
  isWhitelisted: Boolean!
  # name: String
	# symbol: String
	# decimals: Int!
  # totalSupply: 
}

type Account @entity {
  id: ID!
  # TODO need to query every new user's token balances for future modules that may depend on token balance logic
  # ERC20balances: [ERC20Balance!]! @derivedFrom(field: "account")
  notasOwned: [nota!]! @derivedFrom(field: "owner")
  numnotasOwned: BigInt!

  notasSent: [nota!]! @derivedFrom(field: "drawer")
  numnotasSent: BigInt!
  notasReceived: [nota!]! @derivedFrom(field: "recipient")
  numnotasReceived: BigInt!

  transfersFrom: [Transfer!]! @derivedFrom(field: "from")
  transfersTo: [Transfer!]! @derivedFrom(field: "to")

  # Funding data
  # DirectSend data

  approvalsOwner: [Approval!]! @derivedFrom(field: "owner")
  approvalsApproved: [Approval!]! @derivedFrom(field: "approved")
  # Operators are disallowed
  # approvalsForAllOwner: [ApprovalForAll!]! @derivedFrom(field: "owner")
  # approvalsForAllOperator: [ApprovalForAll!]! @derivedFrom(field: "operator")
	events: [Event!]! @derivedFrom(field: "emitter")
}

interface Event {
  id: ID!
  emitter: Account!
  transaction: Transaction!
  timestamp: BigInt!
}

type Transfer implements Event @entity(immutable: true) {
  id: ID!
  emitter: Account!
  transaction: Transaction!
  timestamp: BigInt!
  nota: nota!
  from: Account!
  to: Account!
}
type Escrow implements Event @entity(immutable: true) {  # Instances of escrowing and direct sending, not current balance/state
  id: ID!
  emitter: Account!
  transaction: Transaction!
  timestamp: BigInt!
  nota: nota!
  from: Account!
  # TODO need to do amounts and exact amounts?
  amount: BigInt!
  directAmount: BigInt!
  # directAmountExact: BigInt! # TODO
}
type Approval implements Event @entity {
  id: ID!
  transaction: Transaction!
  timestamp: BigInt!
  nota: nota!
  owner: Account!
  approved: Account!
  emitter: Account!
}

type nota @entity {
  id: ID!
  timestamp: BigInt!
  createdAt: BigInt!
  erc20: ERC20!
  amount: BigDecimal!
  amountExact: BigInt!

  drawer: Account!
  recipient: Account!
  module: Module!
  
  uri: String
  escrowed: BigDecimal!
  escrowedExact: BigInt!

  owner: Account!
  transfers: [Transfer!]! @derivedFrom(field: "nota")
  escrows: [Escrow!]! @derivedFrom(field: "nota")
  approval: Account!
  approvals: [Approval!]! @derivedFrom(field: "nota")
  directPayData: DirectPayData # optional
  # Should the creation hash be stored here?
}

# TODO: figure out why unions aren't working
# union notaData =  BYOAData | SelfSignednotaData
type NotaRegistrar @entity {
  id: ID!  # Should this be the registrar's address?
  name: String!
  writeFee: Int!
  transferFee: Int!
  fundFee: Int!
  cashFee: Int!
  tokenWhitelist: [ERC20!]!
  moduleWhitelist: [Module!]! @derivedFrom(field: "registrar")
}

interface Module {  # Allows new modules to inherit from Module interface
  id: ID!
  registrar: NotaRegistrar!
  isWhitelisted: Boolean!
  writeFee: Int!
  transferFee: Int!
  fundFee: Int!
  cashFee: Int!
  notasManaged: [nota!]! @derivedFrom(field: "module")
  numnotasManaged: BigInt!
}
type DirectPayModule implements Module @entity {
  id: ID!
  registrar: NotaRegistrar!
  isWhitelisted: Boolean!
  writeFee: Int!
  transferFee: Int!
  fundFee: Int!
  cashFee: Int!
  notasManaged: [nota!]! @derivedFrom(field: "module")
  numnotasManaged: BigInt!
}
type DirectPayData @entity {
  id: ID!
  isCashed: Boolean!
  memo: Bytes!
}

# type ERC20Balance @entity {  # Might want to query token balances to prevent user from using token-gated functions
# 	id: ID!
# 	contract: ERC20Contract!
# 	account: Account
# 	value: BigDecimal!
# 	valueExact: BigInt!
# 	# transferFromEvent: [ERC20Transfer!]! @derivedFrom(field: "fromBalance")
# 	# transferToEvent: [ERC20Transfer!]! @derivedFrom(field: "toBalance")
# }
# type ERC20Approval @entity {  # Maybe this is where deposits can be tracked?
# 	id: ID!
# 	contract: ERC20Contract!
# 	owner: Account!
# 	spender: Account!
# 	value: BigDecimal!
# 	valueExact: BigInt!
# }
# type ERC721Operator @entity {  # Operator can transfer any one of their tokens
# 	id: ID!
# 	contract: ERC721Contract!
# 	owner: Account!
# 	operator: Account!
# 	approved: Boolean!
# }
# type TokenRegistry @entity {
#   id: ID!
#   name: String
#   symbol: String
#   tokens: [Token!]! @derivedFrom(field: "registry")
# }
# type Token @entity {
#   id: ID!
#   registry: TokenRegistry!
#   identifier: BigInt!
# }
############################################# Github implementation #####################################################
# https://github.com/sunguru98/erc-721-subgraph/blob/master/src/schema.gql
# type OperatorDelegation @entity {
#   id: ID!
#  # registry: TokenRegistry!
#   owner: Account!
#   operator: Account!
#   approved: Boolean!
#   events: [ApprovalForAll!]! @derivedFrom(field: "delegation")
# }
# type ApprovalForAll implements Event @entity {
#   id: ID!
#   transaction: Transaction!
#   timestamp: BigInt!
#   delegation: OperatorDelegation!
#   owner: Account!
#   operator: Account!
#   approved: Boolean!
# }

############################################# OpenZeppelin official entities ############################################
# type ERC20Contract @entity(immutable: true) {
# 	id: Bytes!
# 	asAccount: Account!
# 	name: String
# 	symbol: String
# 	decimals: Int!
# 	totalSupply: ERC20Balance!
# 	balances: [ERC20Balance!]! @derivedFrom(field: "contract")
# 	approvals: [ERC20Approval!]! @derivedFrom(field: "contract")
# 	transfers: [ERC20Transfer!]! @derivedFrom(field: "contract")
# }
# type ERC721Contract @entity(immutable: true) {
# 	id: Bytes!
# 	asAccount: Account!
# 	supportsMetadata: Boolean
# 	name: String
# 	symbol: String
# 	tokens: [ERC721Token!]! @derivedFrom(field: "contract")
# 	operators: [ERC721Operator!]! @derivedFrom(field: "contract")
# 	transfers: [ERC721Transfer!]! @derivedFrom(field: "contract")
# }
# type ERC721Token @entity {
# 	id: ID!
# 	# contract: ERC721Contract!
# 	# identifier: BigInt!
# 	owner: Account!
# 	approval: Account!
# 	uri: String
# 	transfers: [ERC721Transfer!]! @derivedFrom(field: "token")
# }
# type Account @entity { # 20
# 	# id: Bytes!
# 	# asERC20: ERC20Contract
# 	ERC20balances: [ERC20Balance!]! @derivedFrom(field: "account")
# 	# ERC20approvalsOwner: [ERC20Approval!]! @derivedFrom(field: "owner")
# 	# ERC20approvalsSpender: [ERC20Approval!]! @derivedFrom(field: "spender")
# 	# ERC20transferFromEvent: [ERC20Transfer!]! @derivedFrom(field: "from")
# 	# ERC20transferToEvent: [ERC20Transfer!]! @derivedFrom(field: "to")
# 	# events: [Event!]! @derivedFrom(field: "emitter")
# }
# type Account @entity { # 721
# 	# id: Bytes!
# 	# asERC721: ERC721Contract
# 	# ERC721tokens: [ERC721Token!]! @derivedFrom(field: "owner")
# 	ERC721operatorOwner: [ERC721Operator!]! @derivedFrom(field: "owner")
# 	ERC721operatorOperator: [ERC721Operator!]! @derivedFrom(field: "operator")
# 	# ERC721transferFromEvent: [ERC721Transfer!]! @derivedFrom(field: "from")
# 	# ERC721transferToEvent: [ERC721Transfer!]! @derivedFrom(field: "to")
# 	# events: [Event!]! @derivedFrom(field: "emitter")
# }
# type ERC721Transfer implements Event @entity(immutable: true) {
# 	id: ID!
# 	emitter: Account!
# 	transaction: Transaction!
# 	timestamp: BigInt!
# 	contract: ERC721Contract!
# 	token: ERC721Token!
# 	from: Account!
# 	to: Account!
# }
# type ERC20Transfer implements Event @entity(immutable: true) {
# 	id: ID!
# 	emitter: Account!
# 	transaction: Transaction!
# 	timestamp: BigInt!
# 	contract: ERC20Contract!
# 	from: Account
# 	fromBalance: ERC20Balance
# 	to: Account
# 	toBalance: ERC20Balance
# 	value: BigDecimal!
# 	valueExact: BigInt!
# }