type Transaction @entity {
  id: ID!
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: String!
  events: [Event!]! @derivedFrom(field: "transaction")
}
type ERC20 @entity(immutable: true) {
  id: ID!
  isWhitelisted: Boolean!
  # name: String
	# symbol: String
	# decimals: Int!
  # totalSupply: 
}

type Account @entity {
  id: ID!
  # TODO need to query every new user's token balances for future modules that may depend on token balance logic
  # ERC20balances: [ERC20Balance!]! @derivedFrom(field: "account")
  cheqsOwned: [Cheq!]! @derivedFrom(field: "owner")

  cheqsSent: [Cheq!]! @derivedFrom(field: "sender")
  cheqsReceived: [Cheq!]! @derivedFrom(field: "receiver")
  cheqsInspected: [Cheq!]! @derivedFrom(field: "inspector")

  transfersFrom: [Transfer!]! @derivedFrom(field: "from")
  transfersTo: [Transfer!]! @derivedFrom(field: "to")

  # Funding data
  # DirectSend data

  approvalsOwner: [Approval!]! @derivedFrom(field: "owner")
  approvalsApproved: [Approval!]! @derivedFrom(field: "approved")
  # Operators are disallowed
  # approvalsForAllOwner: [ApprovalForAll!]! @derivedFrom(field: "owner")
  # approvalsForAllOperator: [ApprovalForAll!]! @derivedFrom(field: "operator")
	events: [Event!]! @derivedFrom(field: "emitter")
}

interface Event {
  id: ID!
  emitter: Account!
  transaction: Transaction!
  timestamp: BigInt!
}

type Transfer implements Event @entity(immutable: true) {
  id: ID!
  emitter: Account!
  transaction: Transaction!
  timestamp: BigInt!
  cheq: Cheq!
  from: Account!
  to: Account!
}
type Escrow implements Event @entity(immutable: true) {  # Instances of escrowing and direct sending, not current balance/state
  id: ID!
  emitter: Account!
  transaction: Transaction!
  timestamp: BigInt!
  cheq: Cheq!
  from: Account!
  amount: BigInt!
  instantAmount: BigInt!
}

type Approval implements Event @entity {
  id: ID!
  transaction: Transaction!
  timestamp: BigInt!
  cheq: Cheq!
  owner: Account!
  approved: Account!
  emitter: Account!
}

type Cheq @entity {
  id: ID!
  timestamp: BigInt!
  createdAt: BigInt!
  createdTransaction: Transaction
  erc20: ERC20

  module: Module
  
  uri: String
  escrowed: BigInt

  owner: Account
  transfers: [Transfer!]! @derivedFrom(field: "cheq")
  escrows: [Escrow!]! @derivedFrom(field: "cheq")
  approvals: [Approval!]! @derivedFrom(field: "cheq")
  sender: Account
  receiver: Account
  moduleData: ModuleData!
  transaction: Transaction
  inspector: Account
}

# TODO: figure out why unions aren't working
# union CheqData =  BYOAData | SelfSignedCheqData
type CheqRegistrar @entity {
  id: ID!  # Should this be the registrar's address?
  name: String!
  writeFee: Int!
  transferFee: Int!
  fundFee: Int!
  cashFee: Int!
  tokenWhitelist: [ERC20!]!
  moduleWhitelist: [Module!]! @derivedFrom(field: "registrar")
}

interface ModuleData {
    id: ID!
} 

enum DirectPayStatus {
  AWAITING_PAYMENT
  PAID
}

type DirectPayData implements ModuleData @entity {
  id: ID!
  amount: BigInt!
  creditor: Account!
  debtor: Account!
  memo: Bytes!
  dueDate: BigInt!
  isInvoice: Boolean!
  status: DirectPayStatus
  fundedTransaction: Transaction
  fundedTimestamp: BigInt
  isCrossChain: Boolean
  sourceChain: BigInt 
  destChain: BigInt
}

enum EscrowStatus {
  AWAITING_ESCROW
  AWAITING_RELEASE
  RELEASED
  VOIDED
}

type ReversiblePaymentData implements ModuleData @entity {
  id: ID!
  amount: BigInt!
  creditor: Account!
  debtor: Account!
  memo: Bytes!
  status: EscrowStatus
  isSelfSigned: Boolean!
  isInvoice: Boolean!
  fundedTransaction: Transaction
  fundedTimestamp: BigInt
}

interface Module {  # Allows new modules to inherit from Module interface
  id: ID!
  registrar: CheqRegistrar!
  isWhitelisted: Boolean!
  writeFee: Int!
  transferFee: Int!
  fundFee: Int!
  cashFee: Int!
  cheqsManaged: [Cheq!]! @derivedFrom(field: "module")
  numCheqsManaged: BigInt!
}

type DirectPayModule implements Module @entity {
  id: ID!
  registrar: CheqRegistrar!
  isWhitelisted: Boolean!
  writeFee: Int!
  transferFee: Int!
  fundFee: Int!
  cashFee: Int!
  cheqsManaged: [Cheq!]! @derivedFrom(field: "module")
  numCheqsManaged: BigInt!
}



