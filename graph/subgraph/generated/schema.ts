// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Transaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Transaction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Transaction must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Transaction", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Transaction | null {
    return changetype<Transaction | null>(
      store.get_in_block("Transaction", id)
    );
  }

  static load(id: string): Transaction | null {
    return changetype<Transaction | null>(store.get("Transaction", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }
}

export class ERC20 extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ERC20 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ERC20 must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ERC20", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ERC20 | null {
    return changetype<ERC20 | null>(store.get_in_block("ERC20", id));
  }

  static load(id: string): ERC20 | null {
    return changetype<ERC20 | null>(store.get("ERC20", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get isWhitelisted(): boolean {
    let value = this.get("isWhitelisted");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isWhitelisted(value: boolean) {
    this.set("isWhitelisted", Value.fromBoolean(value));
  }
}

export class Account extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Account entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Account must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Account", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Account | null {
    return changetype<Account | null>(store.get_in_block("Account", id));
  }

  static load(id: string): Account | null {
    return changetype<Account | null>(store.get("Account", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get cheqsOwned(): NotaLoader {
    return new NotaLoader("Account", this.get("id")!.toString(), "cheqsOwned");
  }

  get cheqsSent(): NotaLoader {
    return new NotaLoader("Account", this.get("id")!.toString(), "cheqsSent");
  }

  get cheqsReceived(): NotaLoader {
    return new NotaLoader(
      "Account",
      this.get("id")!.toString(),
      "cheqsReceived"
    );
  }

  get cheqsInspected(): NotaLoader {
    return new NotaLoader(
      "Account",
      this.get("id")!.toString(),
      "cheqsInspected"
    );
  }

  get transfersFrom(): TransferLoader {
    return new TransferLoader(
      "Account",
      this.get("id")!.toString(),
      "transfersFrom"
    );
  }

  get transfersTo(): TransferLoader {
    return new TransferLoader(
      "Account",
      this.get("id")!.toString(),
      "transfersTo"
    );
  }

  get approvalsOwner(): ApprovalLoader {
    return new ApprovalLoader(
      "Account",
      this.get("id")!.toString(),
      "approvalsOwner"
    );
  }

  get approvalsApproved(): ApprovalLoader {
    return new ApprovalLoader(
      "Account",
      this.get("id")!.toString(),
      "approvalsApproved"
    );
  }
}

export class Transfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Transfer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Transfer must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Transfer", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Transfer | null {
    return changetype<Transfer | null>(store.get_in_block("Transfer", id));
  }

  static load(id: string): Transfer | null {
    return changetype<Transfer | null>(store.get("Transfer", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get emitter(): string {
    let value = this.get("emitter");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set emitter(value: string) {
    this.set("emitter", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get cheq(): string {
    let value = this.get("cheq");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set cheq(value: string) {
    this.set("cheq", Value.fromString(value));
  }

  get from(): string {
    let value = this.get("from");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set from(value: string) {
    this.set("from", Value.fromString(value));
  }

  get to(): string {
    let value = this.get("to");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set to(value: string) {
    this.set("to", Value.fromString(value));
  }
}

export class Escrow extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Escrow entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Escrow must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Escrow", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Escrow | null {
    return changetype<Escrow | null>(store.get_in_block("Escrow", id));
  }

  static load(id: string): Escrow | null {
    return changetype<Escrow | null>(store.get("Escrow", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get emitter(): string {
    let value = this.get("emitter");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set emitter(value: string) {
    this.set("emitter", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get cheq(): string {
    let value = this.get("cheq");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set cheq(value: string) {
    this.set("cheq", Value.fromString(value));
  }

  get from(): string {
    let value = this.get("from");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set from(value: string) {
    this.set("from", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get instantAmount(): BigInt {
    let value = this.get("instantAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set instantAmount(value: BigInt) {
    this.set("instantAmount", Value.fromBigInt(value));
  }
}

export class Approval extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Approval entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Approval must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Approval", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Approval | null {
    return changetype<Approval | null>(store.get_in_block("Approval", id));
  }

  static load(id: string): Approval | null {
    return changetype<Approval | null>(store.get("Approval", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get cheq(): string {
    let value = this.get("cheq");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set cheq(value: string) {
    this.set("cheq", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get approved(): string {
    let value = this.get("approved");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set approved(value: string) {
    this.set("approved", Value.fromString(value));
  }

  get emitter(): string {
    let value = this.get("emitter");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set emitter(value: string) {
    this.set("emitter", Value.fromString(value));
  }
}

export class Nota extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Nota entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Nota must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Nota", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Nota | null {
    return changetype<Nota | null>(store.get_in_block("Nota", id));
  }

  static load(id: string): Nota | null {
    return changetype<Nota | null>(store.get("Nota", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get createdTransaction(): string | null {
    let value = this.get("createdTransaction");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set createdTransaction(value: string | null) {
    if (!value) {
      this.unset("createdTransaction");
    } else {
      this.set("createdTransaction", Value.fromString(<string>value));
    }
  }

  get erc20(): string | null {
    let value = this.get("erc20");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set erc20(value: string | null) {
    if (!value) {
      this.unset("erc20");
    } else {
      this.set("erc20", Value.fromString(<string>value));
    }
  }

  get module(): string | null {
    let value = this.get("module");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set module(value: string | null) {
    if (!value) {
      this.unset("module");
    } else {
      this.set("module", Value.fromString(<string>value));
    }
  }

  get uri(): string | null {
    let value = this.get("uri");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set uri(value: string | null) {
    if (!value) {
      this.unset("uri");
    } else {
      this.set("uri", Value.fromString(<string>value));
    }
  }

  get escrowed(): BigInt | null {
    let value = this.get("escrowed");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set escrowed(value: BigInt | null) {
    if (!value) {
      this.unset("escrowed");
    } else {
      this.set("escrowed", Value.fromBigInt(<BigInt>value));
    }
  }

  get owner(): string | null {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set owner(value: string | null) {
    if (!value) {
      this.unset("owner");
    } else {
      this.set("owner", Value.fromString(<string>value));
    }
  }

  get transfers(): TransferLoader {
    return new TransferLoader("Nota", this.get("id")!.toString(), "transfers");
  }

  get escrows(): EscrowLoader {
    return new EscrowLoader("Nota", this.get("id")!.toString(), "escrows");
  }

  get approvals(): ApprovalLoader {
    return new ApprovalLoader("Nota", this.get("id")!.toString(), "approvals");
  }

  get sender(): string | null {
    let value = this.get("sender");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set sender(value: string | null) {
    if (!value) {
      this.unset("sender");
    } else {
      this.set("sender", Value.fromString(<string>value));
    }
  }

  get receiver(): string | null {
    let value = this.get("receiver");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set receiver(value: string | null) {
    if (!value) {
      this.unset("receiver");
    } else {
      this.set("receiver", Value.fromString(<string>value));
    }
  }

  get moduleData(): string {
    let value = this.get("moduleData");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set moduleData(value: string) {
    this.set("moduleData", Value.fromString(value));
  }

  get transaction(): string | null {
    let value = this.get("transaction");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set transaction(value: string | null) {
    if (!value) {
      this.unset("transaction");
    } else {
      this.set("transaction", Value.fromString(<string>value));
    }
  }

  get inspector(): string | null {
    let value = this.get("inspector");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set inspector(value: string | null) {
    if (!value) {
      this.unset("inspector");
    } else {
      this.set("inspector", Value.fromString(<string>value));
    }
  }
}

export class NotaRegistrar extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NotaRegistrar entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type NotaRegistrar must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("NotaRegistrar", id.toString(), this);
    }
  }

  static loadInBlock(id: string): NotaRegistrar | null {
    return changetype<NotaRegistrar | null>(
      store.get_in_block("NotaRegistrar", id)
    );
  }

  static load(id: string): NotaRegistrar | null {
    return changetype<NotaRegistrar | null>(store.get("NotaRegistrar", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get writeFee(): i32 {
    let value = this.get("writeFee");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set writeFee(value: i32) {
    this.set("writeFee", Value.fromI32(value));
  }

  get transferFee(): i32 {
    let value = this.get("transferFee");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set transferFee(value: i32) {
    this.set("transferFee", Value.fromI32(value));
  }

  get fundFee(): i32 {
    let value = this.get("fundFee");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set fundFee(value: i32) {
    this.set("fundFee", Value.fromI32(value));
  }

  get cashFee(): i32 {
    let value = this.get("cashFee");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set cashFee(value: i32) {
    this.set("cashFee", Value.fromI32(value));
  }

  get tokenWhitelist(): Array<string> {
    let value = this.get("tokenWhitelist");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set tokenWhitelist(value: Array<string>) {
    this.set("tokenWhitelist", Value.fromStringArray(value));
  }
}

export class DirectPayData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DirectPayData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DirectPayData must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DirectPayData", id.toString(), this);
    }
  }

  static loadInBlock(id: string): DirectPayData | null {
    return changetype<DirectPayData | null>(
      store.get_in_block("DirectPayData", id)
    );
  }

  static load(id: string): DirectPayData | null {
    return changetype<DirectPayData | null>(store.get("DirectPayData", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get creditor(): string {
    let value = this.get("creditor");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set creditor(value: string) {
    this.set("creditor", Value.fromString(value));
  }

  get debtor(): string {
    let value = this.get("debtor");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set debtor(value: string) {
    this.set("debtor", Value.fromString(value));
  }

  get memo(): Bytes {
    let value = this.get("memo");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set memo(value: Bytes) {
    this.set("memo", Value.fromBytes(value));
  }

  get dueDate(): BigInt {
    let value = this.get("dueDate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set dueDate(value: BigInt) {
    this.set("dueDate", Value.fromBigInt(value));
  }

  get isInvoice(): boolean {
    let value = this.get("isInvoice");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isInvoice(value: boolean) {
    this.set("isInvoice", Value.fromBoolean(value));
  }

  get status(): string | null {
    let value = this.get("status");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set status(value: string | null) {
    if (!value) {
      this.unset("status");
    } else {
      this.set("status", Value.fromString(<string>value));
    }
  }

  get fundedTransaction(): string | null {
    let value = this.get("fundedTransaction");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set fundedTransaction(value: string | null) {
    if (!value) {
      this.unset("fundedTransaction");
    } else {
      this.set("fundedTransaction", Value.fromString(<string>value));
    }
  }

  get fundedTimestamp(): BigInt | null {
    let value = this.get("fundedTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set fundedTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("fundedTimestamp");
    } else {
      this.set("fundedTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get isCrossChain(): boolean {
    let value = this.get("isCrossChain");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isCrossChain(value: boolean) {
    this.set("isCrossChain", Value.fromBoolean(value));
  }

  get sourceChain(): BigInt | null {
    let value = this.get("sourceChain");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set sourceChain(value: BigInt | null) {
    if (!value) {
      this.unset("sourceChain");
    } else {
      this.set("sourceChain", Value.fromBigInt(<BigInt>value));
    }
  }

  get destChain(): BigInt | null {
    let value = this.get("destChain");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set destChain(value: BigInt | null) {
    if (!value) {
      this.unset("destChain");
    } else {
      this.set("destChain", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class ReversiblePaymentData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ReversiblePaymentData entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ReversiblePaymentData must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ReversiblePaymentData", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ReversiblePaymentData | null {
    return changetype<ReversiblePaymentData | null>(
      store.get_in_block("ReversiblePaymentData", id)
    );
  }

  static load(id: string): ReversiblePaymentData | null {
    return changetype<ReversiblePaymentData | null>(
      store.get("ReversiblePaymentData", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get creditor(): string {
    let value = this.get("creditor");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set creditor(value: string) {
    this.set("creditor", Value.fromString(value));
  }

  get debtor(): string {
    let value = this.get("debtor");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set debtor(value: string) {
    this.set("debtor", Value.fromString(value));
  }

  get memo(): Bytes {
    let value = this.get("memo");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set memo(value: Bytes) {
    this.set("memo", Value.fromBytes(value));
  }

  get status(): string | null {
    let value = this.get("status");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set status(value: string | null) {
    if (!value) {
      this.unset("status");
    } else {
      this.set("status", Value.fromString(<string>value));
    }
  }

  get isSelfSigned(): boolean {
    let value = this.get("isSelfSigned");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isSelfSigned(value: boolean) {
    this.set("isSelfSigned", Value.fromBoolean(value));
  }

  get isInvoice(): boolean {
    let value = this.get("isInvoice");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isInvoice(value: boolean) {
    this.set("isInvoice", Value.fromBoolean(value));
  }

  get fundedTransaction(): string | null {
    let value = this.get("fundedTransaction");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set fundedTransaction(value: string | null) {
    if (!value) {
      this.unset("fundedTransaction");
    } else {
      this.set("fundedTransaction", Value.fromString(<string>value));
    }
  }

  get fundedTimestamp(): BigInt | null {
    let value = this.get("fundedTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set fundedTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("fundedTimestamp");
    } else {
      this.set("fundedTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class DirectPayModule extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DirectPayModule entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DirectPayModule must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DirectPayModule", id.toString(), this);
    }
  }

  static loadInBlock(id: string): DirectPayModule | null {
    return changetype<DirectPayModule | null>(
      store.get_in_block("DirectPayModule", id)
    );
  }

  static load(id: string): DirectPayModule | null {
    return changetype<DirectPayModule | null>(store.get("DirectPayModule", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get registrar(): string {
    let value = this.get("registrar");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set registrar(value: string) {
    this.set("registrar", Value.fromString(value));
  }

  get isWhitelisted(): boolean {
    let value = this.get("isWhitelisted");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isWhitelisted(value: boolean) {
    this.set("isWhitelisted", Value.fromBoolean(value));
  }

  get writeFee(): i32 {
    let value = this.get("writeFee");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set writeFee(value: i32) {
    this.set("writeFee", Value.fromI32(value));
  }

  get transferFee(): i32 {
    let value = this.get("transferFee");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set transferFee(value: i32) {
    this.set("transferFee", Value.fromI32(value));
  }

  get fundFee(): i32 {
    let value = this.get("fundFee");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set fundFee(value: i32) {
    this.set("fundFee", Value.fromI32(value));
  }

  get cashFee(): i32 {
    let value = this.get("cashFee");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set cashFee(value: i32) {
    this.set("cashFee", Value.fromI32(value));
  }

  get cheqsManaged(): NotaLoader {
    return new NotaLoader(
      "DirectPayModule",
      this.get("id")!.toString(),
      "cheqsManaged"
    );
  }

  get numNotasManaged(): BigInt {
    let value = this.get("numNotasManaged");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set numNotasManaged(value: BigInt) {
    this.set("numNotasManaged", Value.fromBigInt(value));
  }
}

export class NotaLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Nota[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Nota[]>(value);
  }
}

export class TransferLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Transfer[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Transfer[]>(value);
  }
}

export class ApprovalLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Approval[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Approval[]>(value);
  }
}

export class EscrowLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Escrow[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Escrow[]>(value);
  }
}
