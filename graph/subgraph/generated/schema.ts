// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Transaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("transactionHash", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Transaction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Transaction entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Transaction", id.toString(), this);
    }
  }

  static load(id: string): Transaction | null {
    return changetype<Transaction | null>(store.get("Transaction", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value!.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get events(): Array<string> {
    let value = this.get("events");
    return value!.toStringArray();
  }

  set events(value: Array<string>) {
    this.set("events", Value.fromStringArray(value));
  }
}

export class ERC20 extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("isWhitelisted", Value.fromBoolean(false));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ERC20 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ERC20 entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ERC20", id.toString(), this);
    }
  }

  static load(id: string): ERC20 | null {
    return changetype<ERC20 | null>(store.get("ERC20", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get isWhitelisted(): boolean {
    let value = this.get("isWhitelisted");
    return value!.toBoolean();
  }

  set isWhitelisted(value: boolean) {
    this.set("isWhitelisted", Value.fromBoolean(value));
  }
}

export class Account extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Account entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Account entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Account", id.toString(), this);
    }
  }

  static load(id: string): Account | null {
    return changetype<Account | null>(store.get("Account", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get cheqsOwned(): Array<string> {
    let value = this.get("cheqsOwned");
    return value!.toStringArray();
  }

  set cheqsOwned(value: Array<string>) {
    this.set("cheqsOwned", Value.fromStringArray(value));
  }

  get cheqsSent(): Array<string> {
    let value = this.get("cheqsSent");
    return value!.toStringArray();
  }

  set cheqsSent(value: Array<string>) {
    this.set("cheqsSent", Value.fromStringArray(value));
  }

  get cheqsReceived(): Array<string> {
    let value = this.get("cheqsReceived");
    return value!.toStringArray();
  }

  set cheqsReceived(value: Array<string>) {
    this.set("cheqsReceived", Value.fromStringArray(value));
  }

  get cheqsInspected(): Array<string> {
    let value = this.get("cheqsInspected");
    return value!.toStringArray();
  }

  set cheqsInspected(value: Array<string>) {
    this.set("cheqsInspected", Value.fromStringArray(value));
  }

  get transfersFrom(): Array<string> {
    let value = this.get("transfersFrom");
    return value!.toStringArray();
  }

  set transfersFrom(value: Array<string>) {
    this.set("transfersFrom", Value.fromStringArray(value));
  }

  get transfersTo(): Array<string> {
    let value = this.get("transfersTo");
    return value!.toStringArray();
  }

  set transfersTo(value: Array<string>) {
    this.set("transfersTo", Value.fromStringArray(value));
  }

  get approvalsOwner(): Array<string> {
    let value = this.get("approvalsOwner");
    return value!.toStringArray();
  }

  set approvalsOwner(value: Array<string>) {
    this.set("approvalsOwner", Value.fromStringArray(value));
  }

  get approvalsApproved(): Array<string> {
    let value = this.get("approvalsApproved");
    return value!.toStringArray();
  }

  set approvalsApproved(value: Array<string>) {
    this.set("approvalsApproved", Value.fromStringArray(value));
  }

  get events(): Array<string> {
    let value = this.get("events");
    return value!.toStringArray();
  }

  set events(value: Array<string>) {
    this.set("events", Value.fromStringArray(value));
  }
}

export class Transfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("emitter", Value.fromString(""));
    this.set("transaction", Value.fromString(""));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("cheq", Value.fromString(""));
    this.set("from", Value.fromString(""));
    this.set("to", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Transfer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Transfer entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Transfer", id.toString(), this);
    }
  }

  static load(id: string): Transfer | null {
    return changetype<Transfer | null>(store.get("Transfer", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get emitter(): string {
    let value = this.get("emitter");
    return value!.toString();
  }

  set emitter(value: string) {
    this.set("emitter", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get cheq(): string {
    let value = this.get("cheq");
    return value!.toString();
  }

  set cheq(value: string) {
    this.set("cheq", Value.fromString(value));
  }

  get from(): string {
    let value = this.get("from");
    return value!.toString();
  }

  set from(value: string) {
    this.set("from", Value.fromString(value));
  }

  get to(): string {
    let value = this.get("to");
    return value!.toString();
  }

  set to(value: string) {
    this.set("to", Value.fromString(value));
  }
}

export class Escrow extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("emitter", Value.fromString(""));
    this.set("transaction", Value.fromString(""));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("cheq", Value.fromString(""));
    this.set("from", Value.fromString(""));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
    this.set("instantAmount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Escrow entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Escrow entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Escrow", id.toString(), this);
    }
  }

  static load(id: string): Escrow | null {
    return changetype<Escrow | null>(store.get("Escrow", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get emitter(): string {
    let value = this.get("emitter");
    return value!.toString();
  }

  set emitter(value: string) {
    this.set("emitter", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get cheq(): string {
    let value = this.get("cheq");
    return value!.toString();
  }

  set cheq(value: string) {
    this.set("cheq", Value.fromString(value));
  }

  get from(): string {
    let value = this.get("from");
    return value!.toString();
  }

  set from(value: string) {
    this.set("from", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get instantAmount(): BigInt {
    let value = this.get("instantAmount");
    return value!.toBigInt();
  }

  set instantAmount(value: BigInt) {
    this.set("instantAmount", Value.fromBigInt(value));
  }
}

export class Approval extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("transaction", Value.fromString(""));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("cheq", Value.fromString(""));
    this.set("owner", Value.fromString(""));
    this.set("approved", Value.fromString(""));
    this.set("emitter", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Approval entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Approval entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Approval", id.toString(), this);
    }
  }

  static load(id: string): Approval | null {
    return changetype<Approval | null>(store.get("Approval", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get cheq(): string {
    let value = this.get("cheq");
    return value!.toString();
  }

  set cheq(value: string) {
    this.set("cheq", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get approved(): string {
    let value = this.get("approved");
    return value!.toString();
  }

  set approved(value: string) {
    this.set("approved", Value.fromString(value));
  }

  get emitter(): string {
    let value = this.get("emitter");
    return value!.toString();
  }

  set emitter(value: string) {
    this.set("emitter", Value.fromString(value));
  }
}

export class Cheq extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("createdAt", Value.fromBigInt(BigInt.zero()));
    this.set("moduleData", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Cheq entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Cheq entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Cheq", id.toString(), this);
    }
  }

  static load(id: string): Cheq | null {
    return changetype<Cheq | null>(store.get("Cheq", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get createdTransaction(): string | null {
    let value = this.get("createdTransaction");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set createdTransaction(value: string | null) {
    if (!value) {
      this.unset("createdTransaction");
    } else {
      this.set("createdTransaction", Value.fromString(<string>value));
    }
  }

  get erc20(): string | null {
    let value = this.get("erc20");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set erc20(value: string | null) {
    if (!value) {
      this.unset("erc20");
    } else {
      this.set("erc20", Value.fromString(<string>value));
    }
  }

  get module(): string | null {
    let value = this.get("module");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set module(value: string | null) {
    if (!value) {
      this.unset("module");
    } else {
      this.set("module", Value.fromString(<string>value));
    }
  }

  get uri(): string | null {
    let value = this.get("uri");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set uri(value: string | null) {
    if (!value) {
      this.unset("uri");
    } else {
      this.set("uri", Value.fromString(<string>value));
    }
  }

  get escrowed(): BigInt | null {
    let value = this.get("escrowed");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set escrowed(value: BigInt | null) {
    if (!value) {
      this.unset("escrowed");
    } else {
      this.set("escrowed", Value.fromBigInt(<BigInt>value));
    }
  }

  get owner(): string | null {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set owner(value: string | null) {
    if (!value) {
      this.unset("owner");
    } else {
      this.set("owner", Value.fromString(<string>value));
    }
  }

  get transfers(): Array<string> {
    let value = this.get("transfers");
    return value!.toStringArray();
  }

  set transfers(value: Array<string>) {
    this.set("transfers", Value.fromStringArray(value));
  }

  get escrows(): Array<string> {
    let value = this.get("escrows");
    return value!.toStringArray();
  }

  set escrows(value: Array<string>) {
    this.set("escrows", Value.fromStringArray(value));
  }

  get approvals(): Array<string> {
    let value = this.get("approvals");
    return value!.toStringArray();
  }

  set approvals(value: Array<string>) {
    this.set("approvals", Value.fromStringArray(value));
  }

  get sender(): string | null {
    let value = this.get("sender");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set sender(value: string | null) {
    if (!value) {
      this.unset("sender");
    } else {
      this.set("sender", Value.fromString(<string>value));
    }
  }

  get receiver(): string | null {
    let value = this.get("receiver");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set receiver(value: string | null) {
    if (!value) {
      this.unset("receiver");
    } else {
      this.set("receiver", Value.fromString(<string>value));
    }
  }

  get moduleData(): string {
    let value = this.get("moduleData");
    return value!.toString();
  }

  set moduleData(value: string) {
    this.set("moduleData", Value.fromString(value));
  }

  get transaction(): string | null {
    let value = this.get("transaction");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set transaction(value: string | null) {
    if (!value) {
      this.unset("transaction");
    } else {
      this.set("transaction", Value.fromString(<string>value));
    }
  }

  get inspector(): string | null {
    let value = this.get("inspector");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set inspector(value: string | null) {
    if (!value) {
      this.unset("inspector");
    } else {
      this.set("inspector", Value.fromString(<string>value));
    }
  }
}

export class CheqRegistrar extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("name", Value.fromString(""));
    this.set("writeFee", Value.fromI32(0));
    this.set("transferFee", Value.fromI32(0));
    this.set("fundFee", Value.fromI32(0));
    this.set("cashFee", Value.fromI32(0));
    this.set("tokenWhitelist", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CheqRegistrar entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save CheqRegistrar entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("CheqRegistrar", id.toString(), this);
    }
  }

  static load(id: string): CheqRegistrar | null {
    return changetype<CheqRegistrar | null>(store.get("CheqRegistrar", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get writeFee(): i32 {
    let value = this.get("writeFee");
    return value!.toI32();
  }

  set writeFee(value: i32) {
    this.set("writeFee", Value.fromI32(value));
  }

  get transferFee(): i32 {
    let value = this.get("transferFee");
    return value!.toI32();
  }

  set transferFee(value: i32) {
    this.set("transferFee", Value.fromI32(value));
  }

  get fundFee(): i32 {
    let value = this.get("fundFee");
    return value!.toI32();
  }

  set fundFee(value: i32) {
    this.set("fundFee", Value.fromI32(value));
  }

  get cashFee(): i32 {
    let value = this.get("cashFee");
    return value!.toI32();
  }

  set cashFee(value: i32) {
    this.set("cashFee", Value.fromI32(value));
  }

  get tokenWhitelist(): Array<string> {
    let value = this.get("tokenWhitelist");
    return value!.toStringArray();
  }

  set tokenWhitelist(value: Array<string>) {
    this.set("tokenWhitelist", Value.fromStringArray(value));
  }

  get moduleWhitelist(): Array<string> {
    let value = this.get("moduleWhitelist");
    return value!.toStringArray();
  }

  set moduleWhitelist(value: Array<string>) {
    this.set("moduleWhitelist", Value.fromStringArray(value));
  }
}

export class DirectPayData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("amount", Value.fromBigInt(BigInt.zero()));
    this.set("creditor", Value.fromString(""));
    this.set("debtor", Value.fromString(""));
    this.set("memo", Value.fromBytes(Bytes.empty()));
    this.set("dueDate", Value.fromBigInt(BigInt.zero()));
    this.set("isInvoice", Value.fromBoolean(false));
    this.set("isCrossChain", Value.fromBoolean(false));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DirectPayData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save DirectPayData entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("DirectPayData", id.toString(), this);
    }
  }

  static load(id: string): DirectPayData | null {
    return changetype<DirectPayData | null>(store.get("DirectPayData", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get creditor(): string {
    let value = this.get("creditor");
    return value!.toString();
  }

  set creditor(value: string) {
    this.set("creditor", Value.fromString(value));
  }

  get debtor(): string {
    let value = this.get("debtor");
    return value!.toString();
  }

  set debtor(value: string) {
    this.set("debtor", Value.fromString(value));
  }

  get memo(): Bytes {
    let value = this.get("memo");
    return value!.toBytes();
  }

  set memo(value: Bytes) {
    this.set("memo", Value.fromBytes(value));
  }

  get dueDate(): BigInt {
    let value = this.get("dueDate");
    return value!.toBigInt();
  }

  set dueDate(value: BigInt) {
    this.set("dueDate", Value.fromBigInt(value));
  }

  get isInvoice(): boolean {
    let value = this.get("isInvoice");
    return value!.toBoolean();
  }

  set isInvoice(value: boolean) {
    this.set("isInvoice", Value.fromBoolean(value));
  }

  get status(): string | null {
    let value = this.get("status");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set status(value: string | null) {
    if (!value) {
      this.unset("status");
    } else {
      this.set("status", Value.fromString(<string>value));
    }
  }

  get fundedTransaction(): string | null {
    let value = this.get("fundedTransaction");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set fundedTransaction(value: string | null) {
    if (!value) {
      this.unset("fundedTransaction");
    } else {
      this.set("fundedTransaction", Value.fromString(<string>value));
    }
  }

  get fundedTimestamp(): BigInt | null {
    let value = this.get("fundedTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set fundedTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("fundedTimestamp");
    } else {
      this.set("fundedTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get isCrossChain(): boolean {
    let value = this.get("isCrossChain");
    return value!.toBoolean();
  }

  set isCrossChain(value: boolean) {
    this.set("isCrossChain", Value.fromBoolean(value));
  }

  get sourceChain(): BigInt | null {
    let value = this.get("sourceChain");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set sourceChain(value: BigInt | null) {
    if (!value) {
      this.unset("sourceChain");
    } else {
      this.set("sourceChain", Value.fromBigInt(<BigInt>value));
    }
  }

  get destChain(): BigInt | null {
    let value = this.get("destChain");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set destChain(value: BigInt | null) {
    if (!value) {
      this.unset("destChain");
    } else {
      this.set("destChain", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class ReversiblePaymentData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("amount", Value.fromBigInt(BigInt.zero()));
    this.set("creditor", Value.fromString(""));
    this.set("debtor", Value.fromString(""));
    this.set("memo", Value.fromBytes(Bytes.empty()));
    this.set("isSelfSigned", Value.fromBoolean(false));
    this.set("isInvoice", Value.fromBoolean(false));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ReversiblePaymentData entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ReversiblePaymentData entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ReversiblePaymentData", id.toString(), this);
    }
  }

  static load(id: string): ReversiblePaymentData | null {
    return changetype<ReversiblePaymentData | null>(
      store.get("ReversiblePaymentData", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get creditor(): string {
    let value = this.get("creditor");
    return value!.toString();
  }

  set creditor(value: string) {
    this.set("creditor", Value.fromString(value));
  }

  get debtor(): string {
    let value = this.get("debtor");
    return value!.toString();
  }

  set debtor(value: string) {
    this.set("debtor", Value.fromString(value));
  }

  get memo(): Bytes {
    let value = this.get("memo");
    return value!.toBytes();
  }

  set memo(value: Bytes) {
    this.set("memo", Value.fromBytes(value));
  }

  get status(): string | null {
    let value = this.get("status");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set status(value: string | null) {
    if (!value) {
      this.unset("status");
    } else {
      this.set("status", Value.fromString(<string>value));
    }
  }

  get isSelfSigned(): boolean {
    let value = this.get("isSelfSigned");
    return value!.toBoolean();
  }

  set isSelfSigned(value: boolean) {
    this.set("isSelfSigned", Value.fromBoolean(value));
  }

  get isInvoice(): boolean {
    let value = this.get("isInvoice");
    return value!.toBoolean();
  }

  set isInvoice(value: boolean) {
    this.set("isInvoice", Value.fromBoolean(value));
  }

  get fundedTransaction(): string | null {
    let value = this.get("fundedTransaction");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set fundedTransaction(value: string | null) {
    if (!value) {
      this.unset("fundedTransaction");
    } else {
      this.set("fundedTransaction", Value.fromString(<string>value));
    }
  }

  get fundedTimestamp(): BigInt | null {
    let value = this.get("fundedTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set fundedTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("fundedTimestamp");
    } else {
      this.set("fundedTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class DirectPayModule extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("registrar", Value.fromString(""));
    this.set("isWhitelisted", Value.fromBoolean(false));
    this.set("writeFee", Value.fromI32(0));
    this.set("transferFee", Value.fromI32(0));
    this.set("fundFee", Value.fromI32(0));
    this.set("cashFee", Value.fromI32(0));
    this.set("numCheqsManaged", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DirectPayModule entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save DirectPayModule entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("DirectPayModule", id.toString(), this);
    }
  }

  static load(id: string): DirectPayModule | null {
    return changetype<DirectPayModule | null>(store.get("DirectPayModule", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get registrar(): string {
    let value = this.get("registrar");
    return value!.toString();
  }

  set registrar(value: string) {
    this.set("registrar", Value.fromString(value));
  }

  get isWhitelisted(): boolean {
    let value = this.get("isWhitelisted");
    return value!.toBoolean();
  }

  set isWhitelisted(value: boolean) {
    this.set("isWhitelisted", Value.fromBoolean(value));
  }

  get writeFee(): i32 {
    let value = this.get("writeFee");
    return value!.toI32();
  }

  set writeFee(value: i32) {
    this.set("writeFee", Value.fromI32(value));
  }

  get transferFee(): i32 {
    let value = this.get("transferFee");
    return value!.toI32();
  }

  set transferFee(value: i32) {
    this.set("transferFee", Value.fromI32(value));
  }

  get fundFee(): i32 {
    let value = this.get("fundFee");
    return value!.toI32();
  }

  set fundFee(value: i32) {
    this.set("fundFee", Value.fromI32(value));
  }

  get cashFee(): i32 {
    let value = this.get("cashFee");
    return value!.toI32();
  }

  set cashFee(value: i32) {
    this.set("cashFee", Value.fromI32(value));
  }

  get cheqsManaged(): Array<string> {
    let value = this.get("cheqsManaged");
    return value!.toStringArray();
  }

  set cheqsManaged(value: Array<string>) {
    this.set("cheqsManaged", Value.fromStringArray(value));
  }

  get numCheqsManaged(): BigInt {
    let value = this.get("numCheqsManaged");
    return value!.toBigInt();
  }

  set numCheqsManaged(value: BigInt) {
    this.set("numCheqsManaged", Value.fromBigInt(value));
  }
}
