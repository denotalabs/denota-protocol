// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class BatchMetadataUpdate extends ethereum.Event {
  get params(): BatchMetadataUpdate__Params {
    return new BatchMetadataUpdate__Params(this);
  }
}

export class BatchMetadataUpdate__Params {
  _event: BatchMetadataUpdate;

  constructor(event: BatchMetadataUpdate) {
    this._event = event;
  }

  get _fromTokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _toTokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Cashed extends ethereum.Event {
  get params(): Cashed__Params {
    return new Cashed__Params(this);
  }
}

export class Cashed__Params {
  _event: Cashed;

  constructor(event: Cashed) {
    this._event = event;
  }

  get casher(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get notaId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get cashData(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }

  get moduleFee(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class ContractURIUpdated extends ethereum.Event {
  get params(): ContractURIUpdated__Params {
    return new ContractURIUpdated__Params(this);
  }
}

export class ContractURIUpdated__Params {
  _event: ContractURIUpdated;

  constructor(event: ContractURIUpdated) {
    this._event = event;
  }
}

export class Funded extends ethereum.Event {
  get params(): Funded__Params {
    return new Funded__Params(this);
  }
}

export class Funded__Params {
  _event: Funded;

  constructor(event: Funded) {
    this._event = event;
  }

  get funder(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get notaId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get instant(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get fundData(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }

  get moduleFee(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class MetadataUpdate extends ethereum.Event {
  get params(): MetadataUpdate__Params {
    return new MetadataUpdate__Params(this);
  }
}

export class MetadataUpdate__Params {
  _event: MetadataUpdate;

  constructor(event: MetadataUpdate) {
    this._event = event;
  }

  get _tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class ModuleWhitelisted extends ethereum.Event {
  get params(): ModuleWhitelisted__Params {
    return new ModuleWhitelisted__Params(this);
  }
}

export class ModuleWhitelisted__Params {
  _event: ModuleWhitelisted;

  constructor(event: ModuleWhitelisted) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get module(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get isAccepted(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }

  get timestamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TokenWhitelisted extends ethereum.Event {
  get params(): TokenWhitelisted__Params {
    return new TokenWhitelisted__Params(this);
  }
}

export class TokenWhitelisted__Params {
  _event: TokenWhitelisted;

  constructor(event: TokenWhitelisted) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get accepted(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }

  get timestamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Transferred extends ethereum.Event {
  get params(): Transferred__Params {
    return new Transferred__Params(this);
  }
}

export class Transferred__Params {
  _event: Transferred;

  constructor(event: Transferred) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get moduleFee(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get fundData(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }

  get timestamp(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class Written extends ethereum.Event {
  get params(): Written__Params {
    return new Written__Params(this);
  }
}

export class Written__Params {
  _event: Written;

  constructor(event: Written) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get notaId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get instant(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get currency(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get escrowed(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get moduleFee(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get module(): Address {
    return this._event.parameters[8].value.toAddress();
  }

  get moduleData(): Bytes {
    return this._event.parameters[9].value.toBytes();
  }
}

export class NotaRegistrar__notaInfoResultValue0Struct extends ethereum.Tuple {
  get escrowed(): BigInt {
    return this[0].toBigInt();
  }

  get currency(): Address {
    return this[1].toAddress();
  }

  get module(): Address {
    return this[2].toAddress();
  }
}

export class NotaRegistrar extends ethereum.SmartContract {
  static bind(address: Address): NotaRegistrar {
    return new NotaRegistrar("NotaRegistrar", address);
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner),
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  contractURI(): string {
    let result = super.call("contractURI", "contractURI():(string)", []);

    return result[0].toString();
  }

  try_contractURI(): ethereum.CallResult<string> {
    let result = super.tryCall("contractURI", "contractURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)],
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  moduleRevenue(module: Address, currency: Address): BigInt {
    let result = super.call(
      "moduleRevenue",
      "moduleRevenue(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(module),
        ethereum.Value.fromAddress(currency),
      ],
    );

    return result[0].toBigInt();
  }

  try_moduleRevenue(
    module: Address,
    currency: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "moduleRevenue",
      "moduleRevenue(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(module),
        ethereum.Value.fromAddress(currency),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  moduleWhitelisted(module: Address): boolean {
    let result = super.call(
      "moduleWhitelisted",
      "moduleWhitelisted(address):(bool)",
      [ethereum.Value.fromAddress(module)],
    );

    return result[0].toBoolean();
  }

  try_moduleWhitelisted(module: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "moduleWhitelisted",
      "moduleWhitelisted(address):(bool)",
      [ethereum.Value.fromAddress(module)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  notaCurrency(notaId: BigInt): Address {
    let result = super.call("notaCurrency", "notaCurrency(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(notaId),
    ]);

    return result[0].toAddress();
  }

  try_notaCurrency(notaId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "notaCurrency",
      "notaCurrency(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(notaId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  notaEscrowed(notaId: BigInt): BigInt {
    let result = super.call("notaEscrowed", "notaEscrowed(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(notaId),
    ]);

    return result[0].toBigInt();
  }

  try_notaEscrowed(notaId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "notaEscrowed",
      "notaEscrowed(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(notaId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  notaInfo(notaId: BigInt): NotaRegistrar__notaInfoResultValue0Struct {
    let result = super.call(
      "notaInfo",
      "notaInfo(uint256):((uint256,address,address))",
      [ethereum.Value.fromUnsignedBigInt(notaId)],
    );

    return changetype<NotaRegistrar__notaInfoResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_notaInfo(
    notaId: BigInt,
  ): ethereum.CallResult<NotaRegistrar__notaInfoResultValue0Struct> {
    let result = super.tryCall(
      "notaInfo",
      "notaInfo(uint256):((uint256,address,address))",
      [ethereum.Value.fromUnsignedBigInt(notaId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<NotaRegistrar__notaInfoResultValue0Struct>(value[0].toTuple()),
    );
  }

  notaModule(notaId: BigInt): Address {
    let result = super.call("notaModule", "notaModule(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(notaId),
    ]);

    return result[0].toAddress();
  }

  try_notaModule(notaId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("notaModule", "notaModule(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(notaId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenURI(notaId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(notaId),
    ]);

    return result[0].toString();
  }

  try_tokenURI(notaId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(notaId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenWhitelisted(token: Address): boolean {
    let result = super.call(
      "tokenWhitelisted",
      "tokenWhitelisted(address):(bool)",
      [ethereum.Value.fromAddress(token)],
    );

    return result[0].toBoolean();
  }

  try_tokenWhitelisted(token: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "tokenWhitelisted",
      "tokenWhitelisted(address):(bool)",
      [ethereum.Value.fromAddress(token)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  validWrite(module: Address, token: Address): boolean {
    let result = super.call(
      "validWrite",
      "validWrite(address,address):(bool)",
      [ethereum.Value.fromAddress(module), ethereum.Value.fromAddress(token)],
    );

    return result[0].toBoolean();
  }

  try_validWrite(
    module: Address,
    token: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "validWrite",
      "validWrite(address,address):(bool)",
      [ethereum.Value.fromAddress(module), ethereum.Value.fromAddress(token)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get notaId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class CashCall extends ethereum.Call {
  get inputs(): CashCall__Inputs {
    return new CashCall__Inputs(this);
  }

  get outputs(): CashCall__Outputs {
    return new CashCall__Outputs(this);
  }
}

export class CashCall__Inputs {
  _call: CashCall;

  constructor(call: CashCall) {
    this._call = call;
  }

  get notaId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get moduleBytes(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class CashCall__Outputs {
  _call: CashCall;

  constructor(call: CashCall) {
    this._call = call;
  }
}

export class FundCall extends ethereum.Call {
  get inputs(): FundCall__Inputs {
    return new FundCall__Inputs(this);
  }

  get outputs(): FundCall__Outputs {
    return new FundCall__Outputs(this);
  }
}

export class FundCall__Inputs {
  _call: FundCall;

  constructor(call: FundCall) {
    this._call = call;
  }

  get notaId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get instant(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get moduleBytes(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class FundCall__Outputs {
  _call: FundCall;

  constructor(call: FundCall) {
    this._call = call;
  }
}

export class MetadataUpdateCall extends ethereum.Call {
  get inputs(): MetadataUpdateCall__Inputs {
    return new MetadataUpdateCall__Inputs(this);
  }

  get outputs(): MetadataUpdateCall__Outputs {
    return new MetadataUpdateCall__Outputs(this);
  }
}

export class MetadataUpdateCall__Inputs {
  _call: MetadataUpdateCall;

  constructor(call: MetadataUpdateCall) {
    this._call = call;
  }

  get notaId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class MetadataUpdateCall__Outputs {
  _call: MetadataUpdateCall;

  constructor(call: MetadataUpdateCall) {
    this._call = call;
  }
}

export class ModuleWithdrawCall extends ethereum.Call {
  get inputs(): ModuleWithdrawCall__Inputs {
    return new ModuleWithdrawCall__Inputs(this);
  }

  get outputs(): ModuleWithdrawCall__Outputs {
    return new ModuleWithdrawCall__Outputs(this);
  }
}

export class ModuleWithdrawCall__Inputs {
  _call: ModuleWithdrawCall;

  constructor(call: ModuleWithdrawCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ModuleWithdrawCall__Outputs {
  _call: ModuleWithdrawCall;

  constructor(call: ModuleWithdrawCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get notaId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get moduleBytes(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetContractURICall extends ethereum.Call {
  get inputs(): SetContractURICall__Inputs {
    return new SetContractURICall__Inputs(this);
  }

  get outputs(): SetContractURICall__Outputs {
    return new SetContractURICall__Outputs(this);
  }
}

export class SetContractURICall__Inputs {
  _call: SetContractURICall;

  constructor(call: SetContractURICall) {
    this._call = call;
  }

  get uri(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetContractURICall__Outputs {
  _call: SetContractURICall;

  constructor(call: SetContractURICall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get notaId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WhitelistModuleCall extends ethereum.Call {
  get inputs(): WhitelistModuleCall__Inputs {
    return new WhitelistModuleCall__Inputs(this);
  }

  get outputs(): WhitelistModuleCall__Outputs {
    return new WhitelistModuleCall__Outputs(this);
  }
}

export class WhitelistModuleCall__Inputs {
  _call: WhitelistModuleCall;

  constructor(call: WhitelistModuleCall) {
    this._call = call;
  }

  get module(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get isWhitelisted(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class WhitelistModuleCall__Outputs {
  _call: WhitelistModuleCall;

  constructor(call: WhitelistModuleCall) {
    this._call = call;
  }
}

export class WhitelistTokenCall extends ethereum.Call {
  get inputs(): WhitelistTokenCall__Inputs {
    return new WhitelistTokenCall__Inputs(this);
  }

  get outputs(): WhitelistTokenCall__Outputs {
    return new WhitelistTokenCall__Outputs(this);
  }
}

export class WhitelistTokenCall__Inputs {
  _call: WhitelistTokenCall;

  constructor(call: WhitelistTokenCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get isWhitelisted(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class WhitelistTokenCall__Outputs {
  _call: WhitelistTokenCall;

  constructor(call: WhitelistTokenCall) {
    this._call = call;
  }
}

export class WriteCall extends ethereum.Call {
  get inputs(): WriteCall__Inputs {
    return new WriteCall__Inputs(this);
  }

  get outputs(): WriteCall__Outputs {
    return new WriteCall__Outputs(this);
  }
}

export class WriteCall__Inputs {
  _call: WriteCall;

  constructor(call: WriteCall) {
    this._call = call;
  }

  get currency(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get escrowed(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get instant(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get owner(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get module(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get moduleBytes(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class WriteCall__Outputs {
  _call: WriteCall;

  constructor(call: WriteCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
