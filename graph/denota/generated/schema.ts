// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class ERC20 extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ERC20 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ERC20 must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("ERC20", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ERC20 | null {
    return changetype<ERC20 | null>(store.get_in_block("ERC20", id));
  }

  static load(id: string): ERC20 | null {
    return changetype<ERC20 | null>(store.get("ERC20", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get isWhitelisted(): boolean {
    let value = this.get("isWhitelisted");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isWhitelisted(value: boolean) {
    this.set("isWhitelisted", Value.fromBoolean(value));
  }
}

export class Account extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Account entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Account must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Account", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Account | null {
    return changetype<Account | null>(store.get_in_block("Account", id));
  }

  static load(id: string): Account | null {
    return changetype<Account | null>(store.get("Account", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get notasSent(): NotaLoader {
    return new NotaLoader("Account", this.get("id")!.toString(), "notasSent");
  }

  get notasReceived(): NotaLoader {
    return new NotaLoader(
      "Account",
      this.get("id")!.toString(),
      "notasReceived",
    );
  }

  get notasOwned(): NotaLoader {
    return new NotaLoader("Account", this.get("id")!.toString(), "notasOwned");
  }

  get transfersFrom(): TransferLoader {
    return new TransferLoader(
      "Account",
      this.get("id")!.toString(),
      "transfersFrom",
    );
  }

  get transfersTo(): TransferLoader {
    return new TransferLoader(
      "Account",
      this.get("id")!.toString(),
      "transfersTo",
    );
  }

  get approvalsOwner(): ApprovalLoader {
    return new ApprovalLoader(
      "Account",
      this.get("id")!.toString(),
      "approvalsOwner",
    );
  }

  get approvalsApproved(): ApprovalLoader {
    return new ApprovalLoader(
      "Account",
      this.get("id")!.toString(),
      "approvalsApproved",
    );
  }

  get approvalsForAllOwner(): ApprovalForAllLoader {
    return new ApprovalForAllLoader(
      "Account",
      this.get("id")!.toString(),
      "approvalsForAllOwner",
    );
  }

  get approvalsForAllOperator(): ApprovalForAllLoader {
    return new ApprovalForAllLoader(
      "Account",
      this.get("id")!.toString(),
      "approvalsForAllOperator",
    );
  }
}

export class Nota extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Nota entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Nota must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Nota", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Nota | null {
    return changetype<Nota | null>(store.get_in_block("Nota", id));
  }

  static load(id: string): Nota | null {
    return changetype<Nota | null>(store.get("Nota", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): string | null {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set token(value: string | null) {
    if (!value) {
      this.unset("token");
    } else {
      this.set("token", Value.fromString(<string>value));
    }
  }

  get escrowed(): BigInt {
    let value = this.get("escrowed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set escrowed(value: BigInt) {
    this.set("escrowed", Value.fromBigInt(value));
  }

  get module(): string | null {
    let value = this.get("module");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set module(value: string | null) {
    if (!value) {
      this.unset("module");
    } else {
      this.set("module", Value.fromString(<string>value));
    }
  }

  get owner(): string | null {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set owner(value: string | null) {
    if (!value) {
      this.unset("owner");
    } else {
      this.set("owner", Value.fromString(<string>value));
    }
  }

  get approved(): string | null {
    let value = this.get("approved");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set approved(value: string | null) {
    if (!value) {
      this.unset("approved");
    } else {
      this.set("approved", Value.fromString(<string>value));
    }
  }

  get sender(): string | null {
    let value = this.get("sender");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set sender(value: string | null) {
    if (!value) {
      this.unset("sender");
    } else {
      this.set("sender", Value.fromString(<string>value));
    }
  }

  get receiver(): string | null {
    let value = this.get("receiver");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set receiver(value: string | null) {
    if (!value) {
      this.unset("receiver");
    } else {
      this.set("receiver", Value.fromString(<string>value));
    }
  }

  get written(): WrittenLoader {
    return new WrittenLoader("Nota", this.get("id")!.toString(), "written");
  }

  get transfers(): TransferLoader {
    return new TransferLoader("Nota", this.get("id")!.toString(), "transfers");
  }

  get funds(): FundedLoader {
    return new FundedLoader("Nota", this.get("id")!.toString(), "funds");
  }

  get cashes(): CashedLoader {
    return new CashedLoader("Nota", this.get("id")!.toString(), "cashes");
  }

  get approvals(): ApprovalLoader {
    return new ApprovalLoader("Nota", this.get("id")!.toString(), "approvals");
  }

  get metadataUpdates(): MetadataUpdateLoader {
    return new MetadataUpdateLoader(
      "Nota",
      this.get("id")!.toString(),
      "metadataUpdates",
    );
  }
}

export class NotaRegistrar extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NotaRegistrar entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type NotaRegistrar must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("NotaRegistrar", id.toString(), this);
    }
  }

  static loadInBlock(id: string): NotaRegistrar | null {
    return changetype<NotaRegistrar | null>(
      store.get_in_block("NotaRegistrar", id),
    );
  }

  static load(id: string): NotaRegistrar | null {
    return changetype<NotaRegistrar | null>(store.get("NotaRegistrar", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get tokenWhitelist(): Array<string> {
    let value = this.get("tokenWhitelist");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set tokenWhitelist(value: Array<string>) {
    this.set("tokenWhitelist", Value.fromStringArray(value));
  }

  get moduleWhitelist(): ModuleLoader {
    return new ModuleLoader(
      "NotaRegistrar",
      this.get("id")!.toString(),
      "moduleWhitelist",
    );
  }
}

export class Module extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Module entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Module must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Module", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Module | null {
    return changetype<Module | null>(store.get_in_block("Module", id));
  }

  static load(id: string): Module | null {
    return changetype<Module | null>(store.get("Module", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get registrar(): string | null {
    let value = this.get("registrar");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set registrar(value: string | null) {
    if (!value) {
      this.unset("registrar");
    } else {
      this.set("registrar", Value.fromString(<string>value));
    }
  }

  get isWhitelisted(): boolean {
    let value = this.get("isWhitelisted");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isWhitelisted(value: boolean) {
    this.set("isWhitelisted", Value.fromBoolean(value));
  }

  get notasManaged(): NotaLoader {
    return new NotaLoader("Module", this.get("id")!.toString(), "notasManaged");
  }

  get notas(): NotaLoader {
    return new NotaLoader("Module", this.get("id")!.toString(), "notas");
  }
}

export class UnknownData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UnknownData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type UnknownData must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("UnknownData", id.toString(), this);
    }
  }

  static loadInBlock(id: string): UnknownData | null {
    return changetype<UnknownData | null>(
      store.get_in_block("UnknownData", id),
    );
  }

  static load(id: string): UnknownData | null {
    return changetype<UnknownData | null>(store.get("UnknownData", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get nota(): string {
    let value = this.get("nota");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set nota(value: string) {
    this.set("nota", Value.fromString(value));
  }

  get writeBytes(): Bytes {
    let value = this.get("writeBytes");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set writeBytes(value: Bytes) {
    this.set("writeBytes", Value.fromBytes(value));
  }

  get externalURI(): string | null {
    let value = this.get("externalURI");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set externalURI(value: string | null) {
    if (!value) {
      this.unset("externalURI");
    } else {
      this.set("externalURI", Value.fromString(<string>value));
    }
  }

  get imageURI(): string | null {
    let value = this.get("imageURI");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set imageURI(value: string | null) {
    if (!value) {
      this.unset("imageURI");
    } else {
      this.set("imageURI", Value.fromString(<string>value));
    }
  }
}

export class DirectSendData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DirectSendData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DirectSendData must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("DirectSendData", id.toString(), this);
    }
  }

  static loadInBlock(id: string): DirectSendData | null {
    return changetype<DirectSendData | null>(
      store.get_in_block("DirectSendData", id),
    );
  }

  static load(id: string): DirectSendData | null {
    return changetype<DirectSendData | null>(store.get("DirectSendData", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get nota(): string {
    let value = this.get("nota");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set nota(value: string) {
    this.set("nota", Value.fromString(value));
  }

  get writeBytes(): Bytes {
    let value = this.get("writeBytes");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set writeBytes(value: Bytes) {
    this.set("writeBytes", Value.fromBytes(value));
  }

  get externalURI(): string | null {
    let value = this.get("externalURI");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set externalURI(value: string | null) {
    if (!value) {
      this.unset("externalURI");
    } else {
      this.set("externalURI", Value.fromString(<string>value));
    }
  }

  get imageURI(): string | null {
    let value = this.get("imageURI");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set imageURI(value: string | null) {
    if (!value) {
      this.unset("imageURI");
    } else {
      this.set("imageURI", Value.fromString(<string>value));
    }
  }
}

export class SimpleCashData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SimpleCashData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SimpleCashData must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("SimpleCashData", id.toString(), this);
    }
  }

  static loadInBlock(id: string): SimpleCashData | null {
    return changetype<SimpleCashData | null>(
      store.get_in_block("SimpleCashData", id),
    );
  }

  static load(id: string): SimpleCashData | null {
    return changetype<SimpleCashData | null>(store.get("SimpleCashData", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get nota(): string {
    let value = this.get("nota");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set nota(value: string) {
    this.set("nota", Value.fromString(value));
  }

  get writeBytes(): Bytes {
    let value = this.get("writeBytes");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set writeBytes(value: Bytes) {
    this.set("writeBytes", Value.fromBytes(value));
  }

  get externalURI(): string | null {
    let value = this.get("externalURI");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set externalURI(value: string | null) {
    if (!value) {
      this.unset("externalURI");
    } else {
      this.set("externalURI", Value.fromString(<string>value));
    }
  }

  get imageURI(): string | null {
    let value = this.get("imageURI");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set imageURI(value: string | null) {
    if (!value) {
      this.unset("imageURI");
    } else {
      this.set("imageURI", Value.fromString(<string>value));
    }
  }
}

export class ReversibleReleaseData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ReversibleReleaseData entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ReversibleReleaseData must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("ReversibleReleaseData", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ReversibleReleaseData | null {
    return changetype<ReversibleReleaseData | null>(
      store.get_in_block("ReversibleReleaseData", id),
    );
  }

  static load(id: string): ReversibleReleaseData | null {
    return changetype<ReversibleReleaseData | null>(
      store.get("ReversibleReleaseData", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get nota(): string {
    let value = this.get("nota");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set nota(value: string) {
    this.set("nota", Value.fromString(value));
  }

  get writeBytes(): Bytes {
    let value = this.get("writeBytes");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set writeBytes(value: Bytes) {
    this.set("writeBytes", Value.fromBytes(value));
  }

  get inspector(): string | null {
    let value = this.get("inspector");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set inspector(value: string | null) {
    if (!value) {
      this.unset("inspector");
    } else {
      this.set("inspector", Value.fromString(<string>value));
    }
  }

  get externalURI(): string | null {
    let value = this.get("externalURI");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set externalURI(value: string | null) {
    if (!value) {
      this.unset("externalURI");
    } else {
      this.set("externalURI", Value.fromString(<string>value));
    }
  }

  get imageURI(): string | null {
    let value = this.get("imageURI");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set imageURI(value: string | null) {
    if (!value) {
      this.unset("imageURI");
    } else {
      this.set("imageURI", Value.fromString(<string>value));
    }
  }
}

export class ReversibleByBeforeDateData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ReversibleByBeforeDateData entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ReversibleByBeforeDateData must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("ReversibleByBeforeDateData", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ReversibleByBeforeDateData | null {
    return changetype<ReversibleByBeforeDateData | null>(
      store.get_in_block("ReversibleByBeforeDateData", id),
    );
  }

  static load(id: string): ReversibleByBeforeDateData | null {
    return changetype<ReversibleByBeforeDateData | null>(
      store.get("ReversibleByBeforeDateData", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get nota(): string {
    let value = this.get("nota");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set nota(value: string) {
    this.set("nota", Value.fromString(value));
  }

  get writeBytes(): Bytes {
    let value = this.get("writeBytes");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set writeBytes(value: Bytes) {
    this.set("writeBytes", Value.fromBytes(value));
  }

  get inspector(): string | null {
    let value = this.get("inspector");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set inspector(value: string | null) {
    if (!value) {
      this.unset("inspector");
    } else {
      this.set("inspector", Value.fromString(<string>value));
    }
  }

  get inspectionEnd(): BigInt | null {
    let value = this.get("inspectionEnd");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set inspectionEnd(value: BigInt | null) {
    if (!value) {
      this.unset("inspectionEnd");
    } else {
      this.set("inspectionEnd", Value.fromBigInt(<BigInt>value));
    }
  }

  get externalURI(): string | null {
    let value = this.get("externalURI");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set externalURI(value: string | null) {
    if (!value) {
      this.unset("externalURI");
    } else {
      this.set("externalURI", Value.fromString(<string>value));
    }
  }

  get imageURI(): string | null {
    let value = this.get("imageURI");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set imageURI(value: string | null) {
    if (!value) {
      this.unset("imageURI");
    } else {
      this.set("imageURI", Value.fromString(<string>value));
    }
  }
}

export class CashBeforeDateData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CashBeforeDateData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CashBeforeDateData must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("CashBeforeDateData", id.toString(), this);
    }
  }

  static loadInBlock(id: string): CashBeforeDateData | null {
    return changetype<CashBeforeDateData | null>(
      store.get_in_block("CashBeforeDateData", id),
    );
  }

  static load(id: string): CashBeforeDateData | null {
    return changetype<CashBeforeDateData | null>(
      store.get("CashBeforeDateData", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get nota(): string {
    let value = this.get("nota");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set nota(value: string) {
    this.set("nota", Value.fromString(value));
  }

  get writeBytes(): Bytes {
    let value = this.get("writeBytes");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set writeBytes(value: Bytes) {
    this.set("writeBytes", Value.fromBytes(value));
  }

  get expirationDate(): BigInt | null {
    let value = this.get("expirationDate");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set expirationDate(value: BigInt | null) {
    if (!value) {
      this.unset("expirationDate");
    } else {
      this.set("expirationDate", Value.fromBigInt(<BigInt>value));
    }
  }

  get externalURI(): string | null {
    let value = this.get("externalURI");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set externalURI(value: string | null) {
    if (!value) {
      this.unset("externalURI");
    } else {
      this.set("externalURI", Value.fromString(<string>value));
    }
  }

  get imageURI(): string | null {
    let value = this.get("imageURI");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set imageURI(value: string | null) {
    if (!value) {
      this.unset("imageURI");
    } else {
      this.set("imageURI", Value.fromString(<string>value));
    }
  }
}

export class CashBeforeDateDripData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CashBeforeDateDripData entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CashBeforeDateDripData must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("CashBeforeDateDripData", id.toString(), this);
    }
  }

  static loadInBlock(id: string): CashBeforeDateDripData | null {
    return changetype<CashBeforeDateDripData | null>(
      store.get_in_block("CashBeforeDateDripData", id),
    );
  }

  static load(id: string): CashBeforeDateDripData | null {
    return changetype<CashBeforeDateDripData | null>(
      store.get("CashBeforeDateDripData", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get nota(): string {
    let value = this.get("nota");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set nota(value: string) {
    this.set("nota", Value.fromString(value));
  }

  get writeBytes(): Bytes {
    let value = this.get("writeBytes");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set writeBytes(value: Bytes) {
    this.set("writeBytes", Value.fromBytes(value));
  }

  get lastDrip(): BigInt | null {
    let value = this.get("lastDrip");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set lastDrip(value: BigInt | null) {
    if (!value) {
      this.unset("lastDrip");
    } else {
      this.set("lastDrip", Value.fromBigInt(<BigInt>value));
    }
  }

  get dripAmount(): BigInt | null {
    let value = this.get("dripAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set dripAmount(value: BigInt | null) {
    if (!value) {
      this.unset("dripAmount");
    } else {
      this.set("dripAmount", Value.fromBigInt(<BigInt>value));
    }
  }

  get dripPeriod(): BigInt | null {
    let value = this.get("dripPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set dripPeriod(value: BigInt | null) {
    if (!value) {
      this.unset("dripPeriod");
    } else {
      this.set("dripPeriod", Value.fromBigInt(<BigInt>value));
    }
  }

  get expirationDate(): BigInt | null {
    let value = this.get("expirationDate");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set expirationDate(value: BigInt | null) {
    if (!value) {
      this.unset("expirationDate");
    } else {
      this.set("expirationDate", Value.fromBigInt(<BigInt>value));
    }
  }

  get externalURI(): string | null {
    let value = this.get("externalURI");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set externalURI(value: string | null) {
    if (!value) {
      this.unset("externalURI");
    } else {
      this.set("externalURI", Value.fromString(<string>value));
    }
  }

  get imageURI(): string | null {
    let value = this.get("imageURI");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set imageURI(value: string | null) {
    if (!value) {
      this.unset("imageURI");
    } else {
      this.set("imageURI", Value.fromString(<string>value));
    }
  }
}

export class Transaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Transaction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Transaction must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Transaction", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Transaction | null {
    return changetype<Transaction | null>(
      store.get_in_block("Transaction", id),
    );
  }

  static load(id: string): Transaction | null {
    return changetype<Transaction | null>(store.get("Transaction", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get hash(): string {
    let value = this.get("hash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set hash(value: string) {
    this.set("hash", Value.fromString(value));
  }
}

export class Written extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Written entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Written must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Written", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Written | null {
    return changetype<Written | null>(store.get_in_block("Written", id));
  }

  static load(id: string): Written | null {
    return changetype<Written | null>(store.get("Written", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get caller(): string {
    let value = this.get("caller");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set caller(value: string) {
    this.set("caller", Value.fromString(value));
  }

  get nota(): string {
    let value = this.get("nota");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set nota(value: string) {
    this.set("nota", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get instant(): BigInt {
    let value = this.get("instant");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set instant(value: BigInt) {
    this.set("instant", Value.fromBigInt(value));
  }

  get token(): string {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get escrowed(): BigInt {
    let value = this.get("escrowed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set escrowed(value: BigInt) {
    this.set("escrowed", Value.fromBigInt(value));
  }

  get moduleFee(): BigInt {
    let value = this.get("moduleFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set moduleFee(value: BigInt) {
    this.set("moduleFee", Value.fromBigInt(value));
  }

  get module(): string {
    let value = this.get("module");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set module(value: string) {
    this.set("module", Value.fromString(value));
  }

  get writeBytes(): Bytes {
    let value = this.get("writeBytes");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set writeBytes(value: Bytes) {
    this.set("writeBytes", Value.fromBytes(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }
}

export class Transfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Transfer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Transfer must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Transfer", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Transfer | null {
    return changetype<Transfer | null>(store.get_in_block("Transfer", id));
  }

  static load(id: string): Transfer | null {
    return changetype<Transfer | null>(store.get("Transfer", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get caller(): string {
    let value = this.get("caller");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set caller(value: string) {
    this.set("caller", Value.fromString(value));
  }

  get from(): string {
    let value = this.get("from");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set from(value: string) {
    this.set("from", Value.fromString(value));
  }

  get to(): string {
    let value = this.get("to");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set to(value: string) {
    this.set("to", Value.fromString(value));
  }

  get nota(): string {
    let value = this.get("nota");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set nota(value: string) {
    this.set("nota", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }
}

export class Transferred extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Transferred entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Transferred must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Transferred", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Transferred | null {
    return changetype<Transferred | null>(
      store.get_in_block("Transferred", id),
    );
  }

  static load(id: string): Transferred | null {
    return changetype<Transferred | null>(store.get("Transferred", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get moduleFee(): BigInt {
    let value = this.get("moduleFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set moduleFee(value: BigInt) {
    this.set("moduleFee", Value.fromBigInt(value));
  }

  get transferBytes(): Bytes {
    let value = this.get("transferBytes");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transferBytes(value: Bytes) {
    this.set("transferBytes", Value.fromBytes(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }
}

export class Funded extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Funded entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Funded must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Funded", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Funded | null {
    return changetype<Funded | null>(store.get_in_block("Funded", id));
  }

  static load(id: string): Funded | null {
    return changetype<Funded | null>(store.get("Funded", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get caller(): string {
    let value = this.get("caller");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set caller(value: string) {
    this.set("caller", Value.fromString(value));
  }

  get nota(): string {
    let value = this.get("nota");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set nota(value: string) {
    this.set("nota", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get instant(): BigInt {
    let value = this.get("instant");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set instant(value: BigInt) {
    this.set("instant", Value.fromBigInt(value));
  }

  get fundBytes(): Bytes {
    let value = this.get("fundBytes");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set fundBytes(value: Bytes) {
    this.set("fundBytes", Value.fromBytes(value));
  }

  get moduleFee(): BigInt {
    let value = this.get("moduleFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set moduleFee(value: BigInt) {
    this.set("moduleFee", Value.fromBigInt(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }
}

export class Cashed extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Cashed entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Cashed must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Cashed", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Cashed | null {
    return changetype<Cashed | null>(store.get_in_block("Cashed", id));
  }

  static load(id: string): Cashed | null {
    return changetype<Cashed | null>(store.get("Cashed", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get caller(): string {
    let value = this.get("caller");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set caller(value: string) {
    this.set("caller", Value.fromString(value));
  }

  get nota(): string {
    let value = this.get("nota");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set nota(value: string) {
    this.set("nota", Value.fromString(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get cashBytes(): Bytes {
    let value = this.get("cashBytes");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set cashBytes(value: Bytes) {
    this.set("cashBytes", Value.fromBytes(value));
  }

  get moduleFee(): BigInt {
    let value = this.get("moduleFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set moduleFee(value: BigInt) {
    this.set("moduleFee", Value.fromBigInt(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }
}

export class Approval extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Approval entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Approval must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Approval", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Approval | null {
    return changetype<Approval | null>(store.get_in_block("Approval", id));
  }

  static load(id: string): Approval | null {
    return changetype<Approval | null>(store.get("Approval", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get caller(): string {
    let value = this.get("caller");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set caller(value: string) {
    this.set("caller", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get approved(): string {
    let value = this.get("approved");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set approved(value: string) {
    this.set("approved", Value.fromString(value));
  }

  get nota(): string {
    let value = this.get("nota");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set nota(value: string) {
    this.set("nota", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }
}

export class MetadataUpdate extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MetadataUpdate entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MetadataUpdate must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("MetadataUpdate", id.toString(), this);
    }
  }

  static loadInBlock(id: string): MetadataUpdate | null {
    return changetype<MetadataUpdate | null>(
      store.get_in_block("MetadataUpdate", id),
    );
  }

  static load(id: string): MetadataUpdate | null {
    return changetype<MetadataUpdate | null>(store.get("MetadataUpdate", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get caller(): string {
    let value = this.get("caller");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set caller(value: string) {
    this.set("caller", Value.fromString(value));
  }

  get nota(): string {
    let value = this.get("nota");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set nota(value: string) {
    this.set("nota", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }
}

export class BatchMetadataUpdate extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BatchMetadataUpdate entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type BatchMetadataUpdate must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("BatchMetadataUpdate", id.toString(), this);
    }
  }

  static loadInBlock(id: string): BatchMetadataUpdate | null {
    return changetype<BatchMetadataUpdate | null>(
      store.get_in_block("BatchMetadataUpdate", id),
    );
  }

  static load(id: string): BatchMetadataUpdate | null {
    return changetype<BatchMetadataUpdate | null>(
      store.get("BatchMetadataUpdate", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _fromTokenId(): BigInt {
    let value = this.get("_fromTokenId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set _fromTokenId(value: BigInt) {
    this.set("_fromTokenId", Value.fromBigInt(value));
  }

  get _toTokenId(): BigInt {
    let value = this.get("_toTokenId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set _toTokenId(value: BigInt) {
    this.set("_toTokenId", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class ApprovalForAll extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ApprovalForAll entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ApprovalForAll must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("ApprovalForAll", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ApprovalForAll | null {
    return changetype<ApprovalForAll | null>(
      store.get_in_block("ApprovalForAll", id),
    );
  }

  static load(id: string): ApprovalForAll | null {
    return changetype<ApprovalForAll | null>(store.get("ApprovalForAll", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get caller(): string {
    let value = this.get("caller");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set caller(value: string) {
    this.set("caller", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get operator(): string {
    let value = this.get("operator");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set operator(value: string) {
    this.set("operator", Value.fromString(value));
  }

  get approved(): boolean {
    let value = this.get("approved");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set approved(value: boolean) {
    this.set("approved", Value.fromBoolean(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }
}

export class ContractURIUpdated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ContractURIUpdated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ContractURIUpdated must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("ContractURIUpdated", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ContractURIUpdated | null {
    return changetype<ContractURIUpdated | null>(
      store.get_in_block("ContractURIUpdated", id),
    );
  }

  static load(id: string): ContractURIUpdated | null {
    return changetype<ContractURIUpdated | null>(
      store.get("ContractURIUpdated", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class ModuleWhitelisted extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ModuleWhitelisted entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ModuleWhitelisted must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("ModuleWhitelisted", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ModuleWhitelisted | null {
    return changetype<ModuleWhitelisted | null>(
      store.get_in_block("ModuleWhitelisted", id),
    );
  }

  static load(id: string): ModuleWhitelisted | null {
    return changetype<ModuleWhitelisted | null>(
      store.get("ModuleWhitelisted", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get module(): Bytes {
    let value = this.get("module");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set module(value: Bytes) {
    this.set("module", Value.fromBytes(value));
  }

  get isAccepted(): boolean {
    let value = this.get("isAccepted");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isAccepted(value: boolean) {
    this.set("isAccepted", Value.fromBoolean(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class OwnershipTransferred extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save OwnershipTransferred entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type OwnershipTransferred must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("OwnershipTransferred", id.toString(), this);
    }
  }

  static loadInBlock(id: string): OwnershipTransferred | null {
    return changetype<OwnershipTransferred | null>(
      store.get_in_block("OwnershipTransferred", id),
    );
  }

  static load(id: string): OwnershipTransferred | null {
    return changetype<OwnershipTransferred | null>(
      store.get("OwnershipTransferred", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get previousOwner(): Bytes {
    let value = this.get("previousOwner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set previousOwner(value: Bytes) {
    this.set("previousOwner", Value.fromBytes(value));
  }

  get newOwner(): Bytes {
    let value = this.get("newOwner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set newOwner(value: Bytes) {
    this.set("newOwner", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class TokenWhitelisted extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TokenWhitelisted entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TokenWhitelisted must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("TokenWhitelisted", id.toString(), this);
    }
  }

  static loadInBlock(id: string): TokenWhitelisted | null {
    return changetype<TokenWhitelisted | null>(
      store.get_in_block("TokenWhitelisted", id),
    );
  }

  static load(id: string): TokenWhitelisted | null {
    return changetype<TokenWhitelisted | null>(
      store.get("TokenWhitelisted", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get caller(): Bytes {
    let value = this.get("caller");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set caller(value: Bytes) {
    this.set("caller", Value.fromBytes(value));
  }

  get token(): string {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get accepted(): boolean {
    let value = this.get("accepted");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set accepted(value: boolean) {
    this.set("accepted", Value.fromBoolean(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }
}

export class NotaLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Nota[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Nota[]>(value);
  }
}

export class TransferLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Transfer[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Transfer[]>(value);
  }
}

export class ApprovalLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Approval[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Approval[]>(value);
  }
}

export class ApprovalForAllLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): ApprovalForAll[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<ApprovalForAll[]>(value);
  }
}

export class WrittenLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Written[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Written[]>(value);
  }
}

export class FundedLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Funded[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Funded[]>(value);
  }
}

export class CashedLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Cashed[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Cashed[]>(value);
  }
}

export class MetadataUpdateLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): MetadataUpdate[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<MetadataUpdate[]>(value);
  }
}

export class ModuleLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Module[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Module[]>(value);
  }
}
