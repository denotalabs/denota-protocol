# TODO look into ID vs Bytes type for id field
############################################# Nota ###############################################
type ERC20 @entity {
  id: ID!
  isWhitelisted: Boolean
  # name: String
	# symbol: String
	# decimals: Int!
  # totalSupply: BigInt!
}

type Transaction @entity {
  id: ID!
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: String!
  events: [Event!]! @derivedFrom(field: "transaction")
}
type Account @entity {
  id: ID!
  notasSent: [Nota!]! @derivedFrom(field: "sender")
  notasReceived: [Nota!]! @derivedFrom(field: "receiver")
  notasOwned: [Nota!]! @derivedFrom(field: "owner")

  transfersFrom: [Transfer!]! @derivedFrom(field: "from")
  transfersTo: [Transfer!]! @derivedFrom(field: "to")

  approvalsOwner: [Approval!]! @derivedFrom(field: "owner")
  approvalsApproved: [Approval!]! @derivedFrom(field: "approved")
  approvalsForAllOwner: [ApprovalForAll!]! @derivedFrom(field: "owner")
  approvalsForAllOperator: [ApprovalForAll!]! @derivedFrom(field: "operator")
	events: [Event!]! @derivedFrom(field: "caller")
  # TODO: make module specific properties addable by module? 
  # notasInspected: [Nota!]! @derivedFrom(field: "inspector")
}

interface Event {
  id: ID!
  caller: Account!
  transaction: Transaction!
}

type Transfer implements Event @entity(immutable: true) {
  id: ID!
  caller: Account! # Can be approved/operator..?
  from: Account!
  to: Account!
  nota: Nota!
  transaction: Transaction!
}

type Approval implements Event @entity {
  id: ID!
  caller: Account!
  owner: Account!
  approved: Account!
  nota: Nota!
  transaction: Transaction!
}

type Nota @entity {
  id: ID!
  erc20: ERC20
  escrowed: BigInt
  module: Module
  sender: Account
  receiver: Account
  owner: Account
  uri: String
  # TODO add imageURI: String AND externalURI: String
  createdTransaction: Transaction

  transfers: [Transfer!]! @derivedFrom(field: "nota")
  # escrows: [Escrow!]! @derivedFrom(field: "nota")
  funds: [Funded!]! @derivedFrom(field: "nota")
  cashes: [Cashed!]! @derivedFrom(field: "nota")
  approvals: [Approval!]! @derivedFrom(field: "nota")
  # moduleData: ModuleData!
  # TODO put in moduleData inspector: Account
}
# TODO: figure out why unions aren't working
# union NotaData =  BYOAData | SelfSignedNotaData

type NotaRegistrar @entity {
  id: ID!  # Should this be the registrar's address?
  name: String!
  tokenWhitelist: [ERC20!]!
  moduleWhitelist: [Module!]! @derivedFrom(field: "registrar")
}

type Module @entity {  # Allows new modules to inherit from Module interface
  id: ID!
  registrar: NotaRegistrar!
  isWhitelisted: Boolean
  notasManaged: [Nota!]! @derivedFrom(field: "module")
  # transactions: [Transaction!]! @derivedFrom(field: "")
  # numNotasManaged: BigInt!
}

# interface ModuleData {
#     id: ID!
#     # Add documentURI
#     # Add imageURI
# } 

##################################### Nota Based Entities ###############################################
# type Approval @entity(immutable: true) {
#   id: Bytes!
#   owner: Bytes! # address
#   approved: Bytes! # address
#   tokenId: BigInt! # uint256
#   blockNumber: BigInt!
#   blockTimestamp: BigInt!
#   transactionHash: Bytes!
# }

type ApprovalForAll @entity(immutable: true) {
  id: Bytes!
  owner: Account! # address
  operator: Account! # address
  approved: Boolean! # bool
  transaction: Transaction!
}

# TODO use these entities instead of the escrow one
type Cashed @entity(immutable: true) {
  id: ID!
  casher: Bytes! # address
  nota: Nota!
  to: Bytes! # address
  amount: BigInt! # uint256
  cashData: Bytes! # bytes
  moduleFee: BigInt! # uint256
  transaction: Transaction!
}

type Funded @entity(immutable: true) {
  id: ID!
  funder: Bytes! # address
  nota: Nota!
  amount: BigInt! # uint256
  instant: BigInt! # uint256
  fundData: Bytes! # bytes
  moduleFee: BigInt! # uint256
  transaction: Transaction!
}

# type Transfer @entity(immutable: true) {
#   id: Bytes!
#   from: Bytes! # address
#   to: Bytes! # address
#   tokenId: BigInt! # uint256
#   blockNumber: BigInt!
#   blockTimestamp: BigInt!
#   transactionHash: Bytes!
# }

type Transferred @entity(immutable: true) {
  id: ID!
  tokenId: BigInt! # uint256
  from: Bytes! # address
  to: Bytes! # address
  moduleFee: BigInt! # uint256
  fundData: Bytes! # bytes
  transaction: Transaction!
}

type Written @entity(immutable: true) {
  id: ID!
  caller: Account!
  nota: Nota!
  owner: Account!
  instant: BigInt! # uint256
  currency: ERC20!
  escrowed: BigInt! # uint256
  moduleFee: BigInt! # uint256
  module: Bytes! # address
  moduleData: Bytes! # bytes
  transaction: Transaction!
}

# TODO refactor this into the Nota entity
# Question: can you query tokenURI and update the results on the Nota?
type BatchMetadataUpdate @entity(immutable: true) {
  id: Bytes!
  _fromTokenId: BigInt! # uint256
  _toTokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MetadataUpdate @entity(immutable: true) {
  id: Bytes!
  _tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

###################################### Registrar Entities #############################################
# TODO need to refactor this into the registrar entity
type ContractURIUpdated @entity(immutable: true) {
  id: Bytes!

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ModuleWhitelisted @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  module: Bytes! # address
  isAccepted: Boolean! # bool
  timestamp: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TokenWhitelisted @entity(immutable: true) {
  id: Bytes!
  caller: Bytes! # address
  token: ERC20!
  accepted: Boolean! # bool
  transaction: Transaction!
}
