# TODO look into ID vs Bytes type for id field
############################################# Nota ###############################################
type ERC20 @entity {
  id: ID!
  isWhitelisted: Boolean
  # name: String
	# symbol: String
	# decimals: Int!
  # totalSupply: BigInt!
}

type Transaction @entity {
  id: ID!
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: String!
  events: [Event!]! @derivedFrom(field: "transaction")
}

type Account @entity {
  id: ID!
  notasSent: [Nota!]! @derivedFrom(field: "sender")
  notasReceived: [Nota!]! @derivedFrom(field: "receiver")
  notasOwned: [Nota!]! @derivedFrom(field: "owner")

  transfersFrom: [Transfer!]! @derivedFrom(field: "from")
  transfersTo: [Transfer!]! @derivedFrom(field: "to")

  approvalsOwner: [Approval!]! @derivedFrom(field: "owner")
  approvalsApproved: [Approval!]! @derivedFrom(field: "approved")
  approvalsForAllOwner: [ApprovalForAll!]! @derivedFrom(field: "owner")
  approvalsForAllOperator: [ApprovalForAll!]! @derivedFrom(field: "operator")
	events: [Event!]! @derivedFrom(field: "caller")
  # TODO: make module specific properties addable by module? 
  # notasInspected: [Nota!]! @derivedFrom(field: "inspector")
}

interface Event {
  id: ID!
  caller: Account!
  transaction: Transaction!
}

type Transfer implements Event @entity(immutable: true) {
  id: ID!
  caller: Account! # Can be approved/operator..?
  from: Account!
  to: Account!
  nota: Nota!
  transaction: Transaction!
}

type Approval implements Event @entity(immutable: true) {
  id: ID!
  caller: Account! # Redundant but kept for compatibility
  owner: Account!
  approved: Account!
  nota: Nota!
  transaction: Transaction!
}

type Nota @entity {
  id: ID!
  currency: ERC20
  escrowed: BigInt!
  module: Module
  sender: Account
  receiver: Account
  owner: Account
  createdTransaction: Transaction

  written: Written! @derivedFrom(field: "nota")
  transfers: [Transfer!]! @derivedFrom(field: "nota")
  funds: [Funded!]! @derivedFrom(field: "nota")
  cashes: [Cashed!]! @derivedFrom(field: "nota")
  approvals: [Approval!]! @derivedFrom(field: "nota")
  moduleData: ModuleData @derivedFrom(field: "nota")
}

type NotaRegistrar @entity {
  id: ID!  # Should this be the registrar's address?
  name: String!
  tokenWhitelist: [ERC20!]!
  moduleWhitelist: [Module!]! @derivedFrom(field: "registrar")
}

type Module @entity {  # Allows new modules to inherit from Module interface
  id: ID!
  registrar: NotaRegistrar # NOTE: since bytecode whitelisting there will be modules where write will work but don't have the registrar address available in the write event but are valid
  isWhitelisted: Boolean
  notasManaged: [Nota!]! @derivedFrom(field: "module")
  notas: [Nota!]! @derivedFrom(field: "module")
  # numNotasManaged: BigInt!
}

interface ModuleData {
    id: ID!  # Could be the same as the Nota Id
    nota: Nota!
    raw: Bytes!
    externalURI: String  # might not even be universal here
    imageURI: String # might not even be universal here
}

type DirectSendData implements ModuleData @entity {
    id: ID!
    nota: Nota!
    raw: Bytes!
    externalURI: String
    imageURI: String
}
type SimpleCashData implements ModuleData @entity {
    id: ID!
    nota: Nota!
    raw: Bytes!
    externalURI: String
    imageURI: String
}
type ReversibleReleaseData implements ModuleData @entity {
    id: ID!
    nota: Nota!
    raw: Bytes!
    inspector: Account
    externalURI: String
    imageURI: String
}
type ReversibleByBeforeDateData implements ModuleData @entity {
    id: ID!
    nota: Nota!
    raw: Bytes!
    inspector: Account
    inspectionEnd: BigInt
    externalURI: String
    imageURI: String
}
type CashBeforeDateData implements ModuleData @entity {
    id: ID!
    nota: Nota!
    raw: Bytes!
    expirationDate: BigInt
    externalURI: String
    imageURI: String
}
type CashBeforeDateDripData implements ModuleData @entity {
    id: ID!
    nota: Nota!
    raw: Bytes!
    # lastDrip: BigInt
    dripAmount: BigInt
    dripPeriod: BigInt
    expirationDate: BigInt
    externalURI: String
    imageURI: String
}

##################################### Nota Based Entities ###############################################
type ApprovalForAll implements Event @entity(immutable: true) {
  id: ID!
  caller: Account! # Redundant but kept for compatibility
  owner: Account! # address
  operator: Account! # address
  approved: Boolean! # bool
  transaction: Transaction!
}

# TODO use these entities instead of the escrow one
type Cashed implements Event @entity(immutable: true) {
  id: ID!
  caller: Account! # address
  nota: Nota!
  to: Bytes! # address
  amount: BigInt! # uint256
  cashData: Bytes! # bytes
  moduleFee: BigInt! # uint256
  transaction: Transaction!
}

type Funded implements Event @entity(immutable: true) {
  id: ID!
  caller: Account! # address
  nota: Nota!
  amount: BigInt! # uint256
  instant: BigInt! # uint256
  fundData: Bytes! # bytes
  moduleFee: BigInt! # uint256
  transaction: Transaction!
}

type Transferred @entity(immutable: true) {
  id: ID!
  # caller: Account!
  tokenId: BigInt! # uint256
  from: Bytes! # address
  to: Bytes! # address
  moduleFee: BigInt! # uint256
  fundData: Bytes! # bytes
  transaction: Transaction!
}

type Written implements Event @entity(immutable: true) {
  id: ID!
  caller: Account!
  nota: Nota!
  owner: Account!
  instant: BigInt! # uint256
  currency: ERC20!
  escrowed: BigInt! # uint256
  moduleFee: BigInt! # uint256
  module: Module!
  moduleData: Bytes! # bytes
  transaction: Transaction!
}

# TODO refactor this into the Nota entity
# Question: can you query tokenURI and update the results on the Nota?
type BatchMetadataUpdate @entity(immutable: true) {
  id: ID!
  _fromTokenId: BigInt! # uint256
  _toTokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MetadataUpdate @entity(immutable: true) {
  id: ID!
  _tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

###################################### Registrar Entities #############################################
# TODO need to refactor this into the registrar entity
type ContractURIUpdated @entity(immutable: true) {
  id: ID!

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ModuleWhitelisted @entity(immutable: true) {
  id: ID!
  user: Bytes! # address
  module: Bytes! # address
  isAccepted: Boolean! # bool
  timestamp: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferred @entity(immutable: true) {
  id: ID!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TokenWhitelisted @entity(immutable: true) {
  id: ID!
  caller: Bytes! # address
  token: ERC20!
  accepted: Boolean! # bool
  transaction: Transaction!
}
